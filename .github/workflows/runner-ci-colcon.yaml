# # This action builds and tests a ROS or ROS 2 workspace from source.
# # https://github.com/marketplace/actions/ros-2-ci-action
# # Comments a pull request with the code coverage generated by your tests.
# # https://github.com/romeovs/lcov-reporter-action
# # https://github.com/marketplace/actions/code-coverage-report

# name: runner-ci-colcon

# on:
#   push:
#     branches: ['master']
#   pull_request:


# env:
#   BUILD_PACKAGE_NAME: "colcon_package_action_test"

# jobs:
#   setup:
#     name: Setup ROS Runner CI
#     strategy:
#       fail-fast: false
#       matrix:
#         ubuntu: [jammy]
#         distro: [humble]
#     runs-on: ubuntu-latest

#     container:
#       image: rostooling/setup-ros-docker:ubuntu-${{ matrix.ubuntu }}-latest

#     steps:
#       - name: Create Workspace Directory
#         shell: bash
#         run: |
#           mkdir -p /__w/ros_ws/src

#       - name: Clone Package and Dependencies
#         shell: bash
#         run: |
#           github_head_ref=$(echo ${{ github.head_ref}}:-master )
#           echo "$github_head_ref"
#           rm -rf /tmp/dependencies.repos
#           curl -H \
#             "Authorization: token  ${{ secrets.GITHUB_TOKEN }}" \
#             https://raw.githubusercontent.com/${{ github.repository }}/feat-resuable-workflows/dependencies.repos \
#             -o /tmp/dependencies.repos
#             echo $(cat /tmp/dependencies.repos)

#       - name: Processing Dependencies
#         shell: bash
#         run: |
#           AWK_OUTPUT=$(awk '/url:/ {printf "%s,", $2}' /tmp/dependencies.repos)
#           echo "awk_output=$AWK_OUTPUT" >> $GITHUB_ENV

#       - name: Mapping URLS and Clone Packages
#         working-directory: /__w/ros_ws/src
#         shell: bash
#         run: |
#           echo " ${{ env.awk_output }}"
#           IFS=','
#           read -ra TOKENS <<< ${{ env.awk_output }}
#           for module_name in ${TOKENS[@]}
#             do
#              PACKAGE=$(echo ${module_name} | sed 's#https://github.com/${{ github.repository_owner }}/##')
#              REPOSITORY_NAME=$(echo $PACKAGE | sed 's/\.git$//')
#              PACKAGE_NAME=$(echo "$REPOSITORY_NAME" | sed 's/npd-br-jiro-//; s/-/_/g')
#              git clone https://oauth2:${{ secrets.PAT_GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/${REPOSITORY_NAME}.git $PACKAGE_NAME
#           done
#           git clone -b feat-resuable-workflows https://oauth2:${{ secrets.PAT_GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/colcon_package_action_test.git ${{ env.BUILD_PACKAGE_NAME }}

#       - name: Test
#         working-directory: /__w/ros_ws/src
#         shell: bash
#         run: |
#           echo ${{ env.awk_output }}
#           echo "$(ls -laF ./*)"
#       - uses: ros-tooling/setup-ros@v0.7
#         with:
#           required-ros-distributions: ${{ matrix.distro }}

#       - name: rosdep update
#         working-directory: /__w/ros_ws
#         shell: bash
#         run: |
#           rosdep update

#       - name: Running Build
#         working-directory:  /__w/ros_ws/
#         shell: bash
#         run: |
#           source /opt/ros/humble/setup.bash
#           package_path=$(colcon list --paths-only --packages-up-to colcon_package_action_test)
#           echo $package_path
#           rosdep install -r --from-paths $package_path --ignore-src --skip-keys 'rti-connext-dds-5.3.1 ' --rosdistro  ${{ matrix.distro }} -y
#           package_list=$(colcon list --names-only | tr '\n' ' ')
#           echo $package_list
#           colcon build --symlink-install --packages-up-to $package_list \
#               --event-handlers console_direct+ \
#               --executor sequential \
#               --event-handlers=console_cohesion+

#       - name: Running Tests
#         working-directory:  /__w/ros_ws/
#         shell: bash
#         run: |
#           source /opt/ros/humble/setup.bash
#           colcon test --packages-select colcon_package_action_test \
#           --event-handlers=console_cohesion+ \
#           --event-handlers console_direct+ \
#           --executor sequential

#       - name: Runnning Coverage
#         working-directory:  /__w/ros_ws/
#         shell: bash
#         run: |
#           source /opt/ros/humble/setup.bash
#           source ./install/setup.bash
#           colcon build --packages-select ${{ env.BUILD_PACKAGE_NAME }} --cmake-args \
#             -DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage --coverage" \
#             -DCMAKE_BUILD_TYPE="Debug"
#           lcov --no-external --capture --initial --directory . \
#               --output-file ./build/${{ env.BUILD_PACKAGE_NAME }}/initial_coverage.info
#           colcon test --packages-select ${{ env.PACKAGE_NAME }}
#           lcov --no-external --capture --directory . \
#               --output-file ./build/${{ env.BUILD_PACKAGE_NAME }}/test_coverage.info
#           lcov --add-tracefile ./build/${{ env.BUILD_PACKAGE_NAME }}/initial_coverage.info \
#               --add-tracefile ./build/${{ env.BUILD_PACKAGE_NAME }}/test_coverage.info \
#               --output-file ./build/${{ env.BUILD_PACKAGE_NAME }}/merge_coverage.info
#           lcov --remove  ./build/${{ env.BUILD_PACKAGE_NAME }}/merge_coverage.info \
#               "*/CMakeCCompilerId.c" "*/CMakeCXXCompilerId.cpp" \
#               --output-file ./build/${{ env.BUILD_PACKAGE_NAME }}/report_coverage.info
#           lcov --summary ./build/${{ env.BUILD_PACKAGE_NAME }}/report_coverage.info

#       # - name: Coverage Report
#       #   uses: romeovs/lcov-reporter-action@v0.2.16
#       #   with:
#       #     github-token: ${{ secrets.PAT_GITHUB_TOKEN }}
#       #     lcov-file: ${{ steps.action-ros-ci.outputs.ros-workspace-directory-name }}/build/${{ env.BUILD_PACKAGE_NAME }}/report_coverage.info
