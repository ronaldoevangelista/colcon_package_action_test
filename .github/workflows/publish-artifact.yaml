name: execute-publish-artifact

on:
  workflow_call:
    secrets:
      SECRET_GITHUB_TOKEN:
        description: ''
        required: true
    inputs:
      repository-package:
        required: true
        type: string
        description: 'The name of the repository.'
        default: ${{ github.repository }}
      repository-version:
        required: false
        type: string
        description: 'The version number.'
        default: "0.1.0"
      dependencies-list:
        description: "List of packages dependencies."
        required: true
        type: string
        default: ""

defaults:
  run:
    shell: bash

jobs:
  job:
    runs-on: ubuntu-22.04
    steps:
      - name: list publish artifact
        shell: bash
        run: |
          echo "package ${{ inputs.repository-package }}"
          echo "version ${{ inputs.repository-version }}"
          echo "list ${{ inputs.dependencies-list }}"

      - name: install dependencies
        run: |
          dependencies_list_escaped=$(echo -e "${{ inputs.dependencies-list }}" | tr '\n' ' ')
          deb_depends_list=$(echo  "$dependencies_list_escaped" | tr ' ' ',')
          echo "$deb_depends_list"
          dependencies_without_last_comma=$(echo "$dependencies_string" | awk '{sub(/,$/, ""); print}')
          echo "$dependencies_without_last_comma"
          echo "PACKAGE_DEPENDS=$dependencies_without_last_comma" >> $GITHUB_ENV
          dependencies_install=$(echo "sudo apt-get install -y git cmake ninja-build build-essential $dependencies_list_escaped ")
          apt_install_command="${dependencies_install//\'}"
          sudo apt-get update -y | true && $apt_install_command

      - name: clone repository
        run: |
          IFS='|' read -r repository_url repository_branch <<< "${{ inputs.repository-package }}"
          package_name=$(echo "$repository_url" | cut -d'/' -f4 | cut -d'.' -f1)
          echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV
          echo "REPOSITORY_URL=$repository_url" >> $GITHUB_ENV
          git config --global advice.detachedHead false
          COMMAND=$(echo "git clone -b $repository_branch $repository_url $package_name")
          echo " Downloading: $COMMAND"
          $COMMAND

      - name: configure and build
        run: |
          cmake --version
          mkdir -p build install
          echo $(ls -1)
          cd build
          cmake ../colmap \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DCMAKE_CUDA_ARCHITECTURES=50 \
            -DTESTS_ENABLED=OFF \
            -DCUDA_ENABLED=false \
            -DGUI_ENABLED=false \
            -DASAN_ENABLED=false
          ninja -k 10000
          ninja install

      - name: prepare package contents
        run: |
          echo $(pwd)
          echo "\n${{ env.PACKAGE_DEPENDS }}"
          mkdir -p .debpkg/
          scp -r install/ .debpkg/

      - name: Build deb package
        id: build-deb
        uses: jiro4989/build-deb-action@v3
        with:
          package: "${{ env.PACKAGE_NAME }}"
          package_root: .debpkg
          maintainer: "${{ env.PACKAGE_NAME }}"
          version: "${{ inputs.repository-version }}"
          arch: "amd64"
          depends: "${{ env.PACKAGE_DEPENDS }}"
          desc: "See: ${{ env.REPOSITORY_URL }}"

      - name: Upload deb package
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.build-deb.outputs.file_name}}
          path: ${{steps.build-deb.outputs.file_name}}
          if-no-files-found: error
          overwrite: true
          retention-days: 1

      # - name: compress and publish
      #   id: compress-files
      #   run: |
      #     tar -czf colmap.tar.gz ./install/

      # - name: publicar artefato
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: colmap-artifact
      #     path:  colmap.tar.gz
      #     retention-days: 1
      #     overwrite: true

      # - name: create debian file
      #   uses: Nightwind-Developments/debian-control-file-builder@latest
      #   id: deb-control
      #   with:
      #     config-file: 'configuration.json'
      #     deps-file: 'dependencies.txt'
      #     output-path: '${{ env.LOCAL_DIR }}'
      #     case-sensitive-keys: 'true'

      # - name: Print Output Variable
      #   run: |
      #     echo "${{ steps.deb-control.outputs.output_variable }}"

      # - name: upload generated control file
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: generated-control-file
      #     path: "${{ steps.deb-control.outputs.control_file_path }}"
      #     if-no-files-found: error
      #     overwrite: true
      #     retention-days: 1
