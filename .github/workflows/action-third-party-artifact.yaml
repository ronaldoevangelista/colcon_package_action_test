# https://github.com/marketplace/actions/build-deb-action
name: action-colmap-artifact

on:
  workflow_call:
    secrets:
      SECRET_GITHUB_TOKEN:
        description: ""
        required: true
    inputs:
      repository-package:
        required: true
        type: string
        description: "The name of the repository."
        default: ""
      repository-version:
        required: false
        type: string
        description: "The version number."
        default: "0.1.0"
      dependencies-list:
        description: "List of compiled packages that are dependencies installed via apt."
        required: true
        type: string
        default: ""
      string-build:
          description: >
            Set essential parameters and commands for compiling and installing a project using CMake.
          required: true
          type: string
          default: ""
      retention-days:
        description: >
            Duration after which artifact will expire in days.
            default 1 day.
        required: false
        type: number
        default: 1
    outputs:
      artifact-path:
        description: "artifact path"
        value: ${{ jobs.job.outputs.artifact-path }}

defaults:
  run:
    shell: bash

jobs:
  job:
    runs-on: ubuntu-22.04
    outputs:
      artifact-path: ${{ steps.load-download-path.outputs.artifact-download-path }}
    env:
      ACTIONS_RUNNER_DEBUG: true
    steps:
      - name: install dependencies
        id: install-dependencies
        run: |
          dependencies_list_escaped=$(echo -e "${{ inputs.dependencies-list }}" | tr -s '\n' ' ')
          dependencies_install=$(echo "sudo apt-get install -y git cmake ninja-build build-essential $dependencies_list_escaped ")
          apt_install_command="${dependencies_install//\'}"
          deb_depends_list=$(echo  "$dependencies_list_escaped" | tr ' ' ',')
          dependencies_without_last_comma=$(echo "$deb_depends_list" | awk '{sub(/,$/, ""); print}')
          sudo apt-get update -y | true && $apt_install_command
          echo "PACKAGE_DEPENDS=$dependencies_without_last_comma" >> $GITHUB_ENV

      - name: clone repository
        id: clone-repository
        run: |
          IFS='|' read -r repository_url repository_branch <<< "${{ inputs.repository-package }}"
          package_name=$(echo "$repository_url" | cut -d'/' -f4 | cut -d'.' -f1)
          echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV
          echo "REPOSITORY_URL=$repository_url" >> $GITHUB_ENV
          git config --global advice.detachedHead false
          COMMAND=$(echo "git clone -b $repository_branch $repository_url $package_name")
          $COMMAND

      - name: process input build
        id: process-input-build
        run: |
          echo ${{ inputs.string-build }}
          cleaned_cmake_param=$(echo -e "${{ inputs.string-build }}" | tr -s ' ' | sed ':a;N;$!ba;s/\n/ /g')
          cmake_build_param=$(echo "$cleaned_cmake_param")
          echo "$cmake_build_param"


      - name: configure and build
        id: configure-build
        run: |
          mkdir -p build install
          cd build
          cmake ../${{ env.PACKAGE_NAME }} \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DCMAKE_CUDA_ARCHITECTURES=50 \
            -DTESTS_ENABLED=OFF \
            -DCUDA_ENABLED=false \
            -DGUI_ENABLED=false \
            -DASAN_ENABLED=false \
            -DCGAL_DATA_DIR=.
          ninja -k 10000
          ninja install

      - name: prepare package contents
        id: prepare-package-contents
        run: |
          mkdir -p .debpkg/usr/local
          for x in `/bin/ls install/`; do
            cp -r install/$x .debpkg/usr/local
            echo "install/$x"
          done

      - name: build deb package
        id: build-deb-package
        run: |
          mkdir -p .debpkg/DEBIAN
          cat <<EOF > .debpkg/DEBIAN/control
          Package: ${{ env.PACKAGE_NAME }}
          Version: ${{ inputs.repository-version }}
          Architecture: amd64
          Maintainer: ${{ env.PACKAGE_NAME }}
          Depends: ${{ env.PACKAGE_DEPENDS }}
          Description: See: ${{ env.REPOSITORY_URL }}
          EOF
          dpkg-deb --build .debpkg
          mv .debpkg.deb ${{ env.PACKAGE_NAME }}_${{ inputs.repository-version }}_amd64.deb

      - name: upload deb artifact
        id: upload-deb-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}_${{ inputs.repository-version }}_amd64.deb
          path: ${{ env.PACKAGE_NAME }}_${{ inputs.repository-version }}_amd64.deb
          if-no-files-found: error
          overwrite: true
          retention-days: ${{ inputs.retention-days }}

      - name: load download path
        id: load-download-path
        run: |
          echo "artifact-download-path=${{ env.PACKAGE_NAME }}_${{ inputs.repository-version }}_amd64.deb" >> $GITHUB_OUTPUT
